// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: module/v1/module.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModuleService_CreateModule_FullMethodName = "/module.v1.ModuleService/CreateModule"
	ModuleService_GetModule_FullMethodName    = "/module.v1.ModuleService/GetModule"
	ModuleService_ListModules_FullMethodName  = "/module.v1.ModuleService/ListModules"
	ModuleService_UpdateModule_FullMethodName = "/module.v1.ModuleService/UpdateModule"
	ModuleService_DeleteModule_FullMethodName = "/module.v1.ModuleService/DeleteModule"
)

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleServiceClient interface {
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleResponse, error)
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error)
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error)
}

type moduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleServiceClient(cc grpc.ClientConnInterface) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_CreateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, ModuleService_ListModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_UpdateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_DeleteModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServiceServer is the server API for ModuleService service.
// All implementations must embed UnimplementedModuleServiceServer
// for forward compatibility.
type ModuleServiceServer interface {
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	GetModule(context.Context, *GetModuleRequest) (*GetModuleResponse, error)
	ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error)
	DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error)
	mustEmbedUnimplementedModuleServiceServer()
}

// UnimplementedModuleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModuleServiceServer struct{}

func (UnimplementedModuleServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedModuleServiceServer) GetModule(context.Context, *GetModuleRequest) (*GetModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedModuleServiceServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedModuleServiceServer) UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedModuleServiceServer) DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedModuleServiceServer) mustEmbedUnimplementedModuleServiceServer() {}
func (UnimplementedModuleServiceServer) testEmbeddedByValue()                       {}

// UnsafeModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServiceServer will
// result in compilation errors.
type UnsafeModuleServiceServer interface {
	mustEmbedUnimplementedModuleServiceServer()
}

func RegisterModuleServiceServer(s grpc.ServiceRegistrar, srv ModuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedModuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModuleService_ServiceDesc, srv)
}

func _ModuleService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_UpdateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_DeleteModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleService_ServiceDesc is the grpc.ServiceDesc for ModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "module.v1.ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _ModuleService_CreateModule_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _ModuleService_GetModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _ModuleService_ListModules_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _ModuleService_UpdateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _ModuleService_DeleteModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/v1/module.proto",
}

const (
	ModuleChildService_CreateModuleChild_FullMethodName  = "/module.v1.ModuleChildService/CreateModuleChild"
	ModuleChildService_GetModuleChild_FullMethodName     = "/module.v1.ModuleChildService/GetModuleChild"
	ModuleChildService_ListModuleChildren_FullMethodName = "/module.v1.ModuleChildService/ListModuleChildren"
	ModuleChildService_UpdateModuleChild_FullMethodName  = "/module.v1.ModuleChildService/UpdateModuleChild"
	ModuleChildService_DeleteModuleChild_FullMethodName  = "/module.v1.ModuleChildService/DeleteModuleChild"
)

// ModuleChildServiceClient is the client API for ModuleChildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleChildServiceClient interface {
	CreateModuleChild(ctx context.Context, in *CreateModuleChildRequest, opts ...grpc.CallOption) (*CreateModuleChildResponse, error)
	GetModuleChild(ctx context.Context, in *GetModuleChildRequest, opts ...grpc.CallOption) (*GetModuleChildResponse, error)
	ListModuleChildren(ctx context.Context, in *ListModuleChildrenRequest, opts ...grpc.CallOption) (*ListModuleChildrenResponse, error)
	UpdateModuleChild(ctx context.Context, in *UpdateModuleChildRequest, opts ...grpc.CallOption) (*UpdateModuleChildResponse, error)
	DeleteModuleChild(ctx context.Context, in *DeleteModuleChildRequest, opts ...grpc.CallOption) (*DeleteModuleChildResponse, error)
}

type moduleChildServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleChildServiceClient(cc grpc.ClientConnInterface) ModuleChildServiceClient {
	return &moduleChildServiceClient{cc}
}

func (c *moduleChildServiceClient) CreateModuleChild(ctx context.Context, in *CreateModuleChildRequest, opts ...grpc.CallOption) (*CreateModuleChildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModuleChildResponse)
	err := c.cc.Invoke(ctx, ModuleChildService_CreateModuleChild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleChildServiceClient) GetModuleChild(ctx context.Context, in *GetModuleChildRequest, opts ...grpc.CallOption) (*GetModuleChildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModuleChildResponse)
	err := c.cc.Invoke(ctx, ModuleChildService_GetModuleChild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleChildServiceClient) ListModuleChildren(ctx context.Context, in *ListModuleChildrenRequest, opts ...grpc.CallOption) (*ListModuleChildrenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModuleChildrenResponse)
	err := c.cc.Invoke(ctx, ModuleChildService_ListModuleChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleChildServiceClient) UpdateModuleChild(ctx context.Context, in *UpdateModuleChildRequest, opts ...grpc.CallOption) (*UpdateModuleChildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModuleChildResponse)
	err := c.cc.Invoke(ctx, ModuleChildService_UpdateModuleChild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleChildServiceClient) DeleteModuleChild(ctx context.Context, in *DeleteModuleChildRequest, opts ...grpc.CallOption) (*DeleteModuleChildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteModuleChildResponse)
	err := c.cc.Invoke(ctx, ModuleChildService_DeleteModuleChild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleChildServiceServer is the server API for ModuleChildService service.
// All implementations must embed UnimplementedModuleChildServiceServer
// for forward compatibility.
type ModuleChildServiceServer interface {
	CreateModuleChild(context.Context, *CreateModuleChildRequest) (*CreateModuleChildResponse, error)
	GetModuleChild(context.Context, *GetModuleChildRequest) (*GetModuleChildResponse, error)
	ListModuleChildren(context.Context, *ListModuleChildrenRequest) (*ListModuleChildrenResponse, error)
	UpdateModuleChild(context.Context, *UpdateModuleChildRequest) (*UpdateModuleChildResponse, error)
	DeleteModuleChild(context.Context, *DeleteModuleChildRequest) (*DeleteModuleChildResponse, error)
	mustEmbedUnimplementedModuleChildServiceServer()
}

// UnimplementedModuleChildServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModuleChildServiceServer struct{}

func (UnimplementedModuleChildServiceServer) CreateModuleChild(context.Context, *CreateModuleChildRequest) (*CreateModuleChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModuleChild not implemented")
}
func (UnimplementedModuleChildServiceServer) GetModuleChild(context.Context, *GetModuleChildRequest) (*GetModuleChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleChild not implemented")
}
func (UnimplementedModuleChildServiceServer) ListModuleChildren(context.Context, *ListModuleChildrenRequest) (*ListModuleChildrenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModuleChildren not implemented")
}
func (UnimplementedModuleChildServiceServer) UpdateModuleChild(context.Context, *UpdateModuleChildRequest) (*UpdateModuleChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModuleChild not implemented")
}
func (UnimplementedModuleChildServiceServer) DeleteModuleChild(context.Context, *DeleteModuleChildRequest) (*DeleteModuleChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModuleChild not implemented")
}
func (UnimplementedModuleChildServiceServer) mustEmbedUnimplementedModuleChildServiceServer() {}
func (UnimplementedModuleChildServiceServer) testEmbeddedByValue()                            {}

// UnsafeModuleChildServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleChildServiceServer will
// result in compilation errors.
type UnsafeModuleChildServiceServer interface {
	mustEmbedUnimplementedModuleChildServiceServer()
}

func RegisterModuleChildServiceServer(s grpc.ServiceRegistrar, srv ModuleChildServiceServer) {
	// If the following call pancis, it indicates UnimplementedModuleChildServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModuleChildService_ServiceDesc, srv)
}

func _ModuleChildService_CreateModuleChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleChildServiceServer).CreateModuleChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleChildService_CreateModuleChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleChildServiceServer).CreateModuleChild(ctx, req.(*CreateModuleChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleChildService_GetModuleChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleChildServiceServer).GetModuleChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleChildService_GetModuleChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleChildServiceServer).GetModuleChild(ctx, req.(*GetModuleChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleChildService_ListModuleChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleChildServiceServer).ListModuleChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleChildService_ListModuleChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleChildServiceServer).ListModuleChildren(ctx, req.(*ListModuleChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleChildService_UpdateModuleChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleChildServiceServer).UpdateModuleChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleChildService_UpdateModuleChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleChildServiceServer).UpdateModuleChild(ctx, req.(*UpdateModuleChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleChildService_DeleteModuleChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleChildServiceServer).DeleteModuleChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleChildService_DeleteModuleChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleChildServiceServer).DeleteModuleChild(ctx, req.(*DeleteModuleChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleChildService_ServiceDesc is the grpc.ServiceDesc for ModuleChildService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleChildService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "module.v1.ModuleChildService",
	HandlerType: (*ModuleChildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModuleChild",
			Handler:    _ModuleChildService_CreateModuleChild_Handler,
		},
		{
			MethodName: "GetModuleChild",
			Handler:    _ModuleChildService_GetModuleChild_Handler,
		},
		{
			MethodName: "ListModuleChildren",
			Handler:    _ModuleChildService_ListModuleChildren_Handler,
		},
		{
			MethodName: "UpdateModuleChild",
			Handler:    _ModuleChildService_UpdateModuleChild_Handler,
		},
		{
			MethodName: "DeleteModuleChild",
			Handler:    _ModuleChildService_DeleteModuleChild_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/v1/module.proto",
}
